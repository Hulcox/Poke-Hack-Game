// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FriendStatus {
  PENDING
  ACCEPTED
}

model User {
  id  Int @id @default(autoincrement())
  email String @unique
  username  String
  passwordHash String
  passwordSalt String
  code Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  teams Team[]
  friends Friend[] @relation("UserFriends")
  friendOf  Friend[] @relation("UserFriendsOf")

  @@unique([username, code])
}

model Team {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  name String
  pokemonIds String[]
  totalHp Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Friend {
  id  Int @id @default(autoincrement())
  userId  Int
  friendId  Int
  status  FriendStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("UserFriendsOf", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}